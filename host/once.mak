
# ----------------------------------------------------------------------
# get the specific os release and gcc versions if not set when invoked
# ----------------------------------------------------------------------
X_SPECIFIC ?= $(shell ./get-specific-version-info)

# ----------------------------------------------------------------------
# configuration
# debug=[yes|no] (default: yes)
# ----------------------------------------------------------------------
ifeq (no,$(debug))
X_CONFIGURATION := release
else
X_CONFIGURATION := debug
endif

# if vxfsvacp=yes passed to gmake then set X_VXFSVACP to yes.
ifeq (yes,$(vxfsvacp))
X_VXFSVACP := yes
else
X_VXFSVACP := no
endif

# if 32-bit=yes passed to gmake then set X_32-BIT to yes.
ifeq (yes,$(32-bit))
X_32-BIT := yes
else
X_32-BIT := no
endif

# ----------------------------------------------------------------------
# verbose 
# verbose=no|yes (default: no) 
# ----------------------------------------------------------------------
ifeq (yes,$(verbose))
VERBOSE :=
RULE_SEPARATOR := @echo
else
VERBOSE := @
RULE_SEPARATOR := 
endif

# ----------------------------------------------------------------------
# used for substituting .. in paths
# when one module pulls in source from another module
# ----------------------------------------------------------------------
DOTDOT := dotdot

.PHONY: all
all:: 

.PHONY: clean
clean: clean_modules process_dellist clean_thirdparty_links

clean_modules:
	$(VERBOSE)rm -rf $(X_ARCH)
	$(RULE_SEPARATOR)

.PHONY: clean_all
clean_all: clean clean_thirdparty

.SUFFIXES:

# ----------------------------------------------------------------------
# Specify rules for building partner and version headers
# ----------------------------------------------------------------------
partner ?= inmage
X_PARTNER := $(partner)

include ../build/branding/$(X_PARTNER)/branding_parameters.sh
include version.mak

ifeq ($(X_OP),SunOS)
$(shell ./create_link.sh)
endif

# ----------------------------------------------------------------------
# Force a change in 'partner' to rebuild all dependencies on branding
# ----------------------------------------------------------------------
branding/branding_parameters.h: ../build/branding/$(X_PARTNER)/branding_parameters.h $(X_ARCH)/branding/partner-$(X_PARTNER)
	$(VERBOSE)cp $< $@
	$(RULE_SEPARATOR)

$(X_ARCH)/branding/partner-$(X_PARTNER):
	$(VERBOSE)mkdir -p $(dir $@)
	$(VERBOSE)rm -f $(X_ARCH)/branding/partner-*
	$(VERBOSE)touch $@
	$(RULE_SEPARATOR)

# ----------------------------------------------------------------------
# Rebuild the version.h file whenever the version number or date changes
# ----------------------------------------------------------------------
common/version.h: $(X_ARCH)/branding/version-$(X_VERSION_DOTTED) version_h
	$(RULE_SEPARATOR)

fr_common/version.h: $(X_ARCH)/branding/version-$(X_VERSION_DOTTED)
	$(VERBOSE)echo "#define" INMAGE_PRODUCT_VERSION_STR \"$(X_VERSION_QUALITY)_$(PROD_VERSION)_${X_VERSION_PHASE}_$(X_VERSION_BUILD_NUM)_$(X_VERSION_DATE)\" > $@
	$(VERBOSE)echo "#define" INMAGE_PRODUCT_VERSION $(X_VERSION_MAJOR),$(X_VERSION_MINOR),$(X_VERSION_BUILD_NUM),1 >> $@
	$(VERBOSE)echo "#define" INMAGE_PRODUCT_VERSION_MAJOR $(X_VERSION_MAJOR) >> $@
	$(VERBOSE)echo "#define" INMAGE_PRODUCT_VERSION_MINOR $(X_VERSION_MINOR) >> $@
	$(VERBOSE)echo "#define" INMAGE_PRODUCT_VERSION_BUILDNUM $(X_VERSION_BUILD_NUM) >> $@
	$(VERBOSE)echo "#define" INMAGE_PRODUCT_VERSION_PRIVATE 1 >> $@
	$(VERBOSE)echo "#define" INMAGE_HOST_AGENT_CONFIG_CAPTION \"$(X_VERSION_QUALITY)_$(PROD_VERSION)_${X_VERSION_PHASE}_$(X_VERSION_BUILD_NUM)_$(X_VERSION_DATE)\" >> $@
	$(VERBOSE)echo "#define" PROD_VERSION \"$(PROD_VERSION)\" >> $@
	$(VERBOSE)echo "#define" INMAGE_COPY_RIGHT \"\(C\) $(X_YEAR) Microsoft Corp. All rights reserved.\" >> $@
	$(VERBOSE)echo "#define" INMAGE_PRODUCT_NAME \"Microsoft Azure Site Recovery\" >> $@
	$(RULE_SEPARATOR)

common/version.iss: $(X_ARCH)/branding/version-$(X_VERSION_DOTTED)
	$(VERBOSE)echo "[code]" > $@
	$(VERBOSE)echo function GetInmageVersion( Param: String ): String\;>>$@
	$(VERBOSE)echo begin >> $@
	$(VERBOSE)echo Result := '$(X_VERSION_MAJOR).$(X_VERSION_MINOR)'\; >> $@
	$(VERBOSE)echo end\; >> $@
	$(RULE_SEPARATOR)

$(X_ARCH)/branding/version-$(X_VERSION_DOTTED):
	$(VERBOSE)mkdir -p $(dir $@)
	$(VERBOSE)rm -f $(X_ARCH)/branding/version-*
	$(VERBOSE)touch $@
	$(RULE_SEPARATOR)

# What header files are generated by the branding and version requirements
X_GENERATED_HEADERS := branding/branding_parameters.h common/version.h

# must include thirdparty before module Makefiles as it defines
# variables they need
include $(X_ARCH)-thirdparty.mak

# If a module is listed, but wasn't checked out, we still try to continue
# in case the target we're building doesn't need that module
-include $(addsuffix /Makefile,$(MODULES))

all:: process_dellist

# ======================================================================
# for now the following rules can be here as they should work on all 
# platforms where these make files are used
# ======================================================================
# ----------------------------------------------------------------------
# rule needed to clean up files created by the %.h rule below
# ----------------------------------------------------------------------
process_dellist: dodelete
	@cat dellist 2>/dev/null | xargs rm -f 
	@rm -f dellist
	@touch process_dellist

dodelete:
	@touch dodelete

# ----------------------------------------------------------------------
# rule needed for cases where a .d file has .h files with incomplete 
# paths. this can happen when a Makefile is missing an include path. 
# this allows you to add the missing path and rebuild with out having to 
# clean up .d file(s)
#
# NOTE: we have to create (touch) the missing .h file otherwise you end
# up in an infinite loop. since we don't want to leave these around
# (maybe we could), they are tracked in a file so they can be deleted
# ----------------------------------------------------------------------
%.h:
	$(VERBOSE)./is-generated-header $(X_ARCH) $@
	$(RULE_SEPERATOR)
