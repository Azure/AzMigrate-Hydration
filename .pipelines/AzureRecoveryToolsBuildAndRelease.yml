# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- master
- release
- develop
- users/shamish/*

variables:
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out

stages:
- stage: build
  jobs:

  # Windows build job
  - job: windows_build
    pool:
      demands:
      - msbuild
      - visualstudio
      vmImage: windows-latest
      type: windows-latest

    variables:
      WindowsContainerImage: 'cdpxwin1809.azurecr.io/global/vse2019:latest'
      ob_outputDirectory: '$(Build.SourcesDirectory)\Out'
      ob_symbolsPublishing_enabled: true
      ob_symbolsPublishing_symbolsFolder: '$(REPOROOT)\Symbols'

    steps:
      # Restore host NuGet packages.
      - task: NuGetCommand@2
        displayName: 'Restore Host NuGet Packages'
        inputs:
          command: 'restore'
          restoreSolution: '$(REPOROOT)\host\host.sln'
          feedsToUse: 'config'
          nugetConfigPath: '$(REPOROOT)\.config\NuGet.config'

      # Build AzureRecoveryUtil.exe.
      - task: MSBuild@1
        displayName: 'Build AzureRecoveryUtil.exe'
        inputs: 
          solution: '$(REPOROOT)\host\host.sln'
          msbuildLocationMethod: 'location'
          msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
          platform: 'win32'
          configuration: 'release'
          msbuildArguments: '-t:AzureRecoveryUtil /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\AzureRecoveryUtil.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\AzureRecoveryUtil.err;errorsonly /p:Configuration="LIB release - LIB OpenSSL"'
          clean: false
          maximumCpuCount: true
          logProjectEvents: true

      # Copy build artifacts.
      - task: PowerShell@2
        displayName: 'Copy Build Artifacts'
        inputs:
          targetType: 'inline'
          script: |
            Copy-Item -Path $(REPOROOT)\host\AzureRecoveryUtil\Release\AzureRecoveryUtil.exe $(OUTPUTROOT)\
            Copy-Item -Path $(REPOROOT)\host\AzureRecoveryUtil\Release\AzureRecoveryUtil.pdb $(OUTPUTROOT)\
          workingDirectory: '$(REPOROOT)'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(OUTPUTROOT)'
          ArtifactName: 'drop_build_windows_build'
          publishLocation: 'Container'

      # Capture symbol files.
      - task: PowerShell@2
        displayName: 'Capture Symbol Files'
        inputs:
          targetType: 'inline'
          script: |
            New-Item -Path $(REPOROOT) -Name "Symbols" -ItemType "Directory" -Force
            Copy-Item -Path $(REPOROOT)\host\AzureRecoveryUtil\Release\AzureRecoveryUtil.pdb $(REPOROOT)\Symbols

  # Linux build job.
  - job: linux_build
    pool:
      vmImage: ubuntu-20.04
      type: linux

    variables:
      LinuxContainerImage: 'cdpxlinux.azurecr.io/user/asr-inmage-srcteam/ubuntu-16.04:latest'
      ob_outputDirectory: '$(Build.SourcesDirectory)/out'
      ob_linuxSymbolsPublishing_enabled: true
      ob_linuxSymbolsPublishing_symbolsFolder: '$(REPOROOT)/Symbols'

    steps:

      - task: AzureCLI@2
        inputs:
          azureSubscription: 'AADProt2-Hydration-GQLValidations'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            #Provide the subscription Id of the subscription where managed disk exists
            sourceSubscriptionId="6d875e77-e412-4d7d-9af4-8895278b4443"
            targetSubscriptionId="6d875e77-e412-4d7d-9af4-8895278b4443"

            #Provide the name of your resource group where managed disk exists
            sourceResourceGroupName="shamish-rg-ccy"

            #Provide the name of the managed disk
            sourceManagedDiskName="asrseeddisk-negative-negative-3fe29d9e-1b78-475f-9085-2200c49852f1"
            targetManagedDiskName="github-gql-negativetest-osDisk00"

            #Set the context to the subscription Id where managed disk exists
            az account set --subscription $sourceSubscriptionId

            #Get the managed disk Id 
            managedDiskId=$(az disk show --name $sourceManagedDiskName --resource-group $sourceResourceGroupName --query [id] -o tsv)

            #If managedDiskId is blank then it means that managed disk does not exist.
            echo 'source managed disk Id is: ' $managedDiskId

            #Provide the subscription Id of the subscription where managed disk will be copied to
            targetSubscriptionId="6d875e77-e412-4d7d-9af4-8895278b4443"

            #Name of the resource group where managed disk will be copied to
            targetResourceGroupName="GithubGQL-RG-CCY"

            #Set the context to the subscription Id where managed disk will be copied to
            az account set --subscription $targetSubscriptionId

            #Copy managed disk to different subscription using managed disk Id
            az disk create --resource-group $targetResourceGroupName --name $targetManagedDiskName --source $managedDiskId

      # install g++ and ncurses-devel
      - task: CmdLine@2
        inputs:
          script: |
            sudo apt-get install make -y

            sudo apt-get install g++ -y

            sudo apt-get install build-essential -y

            sudo apt-get install libncurses-dev -y

            sudo apt-get install uuid-dev -y

            sudo apt-get install python-dev -y 2>/dev/null

            sudo apt-get install gettext -y

            sudo apt-get install dc -y

            sudo apt-get install dos2unix -y

            sudo apt-get install less -y

            sudo apt-get install  zlib1g-dev -y

            sudo apt-get install libcurl4-openssl-dev -y

            sudo apt-get install liblzma-dev -y

            sudo apt-get install libexpat1-dev -y

            sudo ln -s -T /usr/bin/make /usr/bin/gmake 2>/dev/null

            exit 0
          failOnStderr: false

      # Build AzureRecoveryUtil binary.
      - task: Bash@3
        displayName: 'Build AzureRecoveryUtil Binary'
        inputs:
          filePath: '$(REPOROOT)/.pipelines/BuildAzureRecoveryUtil.sh'
          failOnStderr: true

      # Capature symbols for publishing.
      - task: Bash@3
        displayName: 'Capature Symbols For Publishing'
        inputs:
          targetType: 'inline'
          script: |
            mkdir -p $(REPOROOT)/Symbols
            cp -f $(REPOROOT)/host/Linux_x86_64/AzureRecoveryUtil/release/AzureRecoveryUtil $(REPOROOT)/Symbols
            cp -f $(REPOROOT)/host/Linux_x86_64/AzureRecoveryUtil/release/AzureRecoveryUtil.dbg $(REPOROOT)/Symbols
          failOnStderr: true

      # Copy build artifacts.
      - task: Bash@3
        displayName: 'Copy Build Artifacts'
        inputs:
          targetType: 'inline'
          script: |
            mkdir -p $(Build.SourcesDirectory)/out/logs
            cp -f $(REPOROOT)/host/Linux_x86_64/AzureRecoveryUtil/release/AzureRecoveryUtil $(Build.SourcesDirectory)/out
            cp -f $(REPOROOT)/host/Linux_x86_64/AzureRecoveryUtil/release/AzureRecoveryUtil.dbg $(Build.SourcesDirectory)/out
            cp -f $(REPOROOT)/host/AzureRecoveryUtil/Scripts/linux/{*.sh,network,*.repo} $(Build.SourcesDirectory)/out
            cp -f $(REPOROOT)/thirdparty/setuptools-33.1.1/{*.py,*.zip} $(Build.SourcesDirectory)/out
            cp -f $(REPOROOT)/host/AzureRecoveryUtilBuild.log $(Build.SourcesDirectory)/out/logs
          failOnStderr: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/out'
          ArtifactName: 'drop_build_linux_build'
          publishLocation: 'Container'

  # Packaging job
  - job: packaging
    dependsOn:
      - windows_build
      - linux_build
    pool:
      vmImage: windows-latest
      type: windows

    steps:
    # Download Windows build artifacts.
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Windows Build Artifacts'
      inputs:
        path: $(Build.StagingDirectory)
        artifact: drop_build_windows_build

    # Download Windows build artifacts.
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Linux Build Artifacts'
      inputs:
        path: $(Build.StagingDirectory)
        artifact: drop_build_linux_build

    # Copy AzureRecoveryTools related files.
    - task: CopyFiles@2
      displayName: 'Copy AzureRecoveryTools Related Files'
      inputs:
        SourceFolder: $(Build.StagingDirectory)
        Contents: |
          **/*
          !**/StartupScript.sh
          !**/*.dbg
          !**/*.pdb
          !logs/**/*
          !**/build.manifest*
          !**/*.cvrp
          !cvdata/**/*
        TargetFolder: $(Build.StagingDirectory)\AzureRecoveryTools

    # Create AzureRecoveryTools.zip
    - task: ArchiveFiles@2
      displayName: 'Create AzureRecoveryTools.zip'
      inputs:
        rootFolderOrFile: $(Build.StagingDirectory)\AzureRecoveryTools
        archiveFile: $(Build.StagingDirectory)\out\AzureRecoveryTools.zip
        includeRootFolder: false

    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'Prot2Hydration-Github-Connection'
        repositoryName: 'thedarksage/AzMigrate-Hydration'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        tagPattern: 'v*.*.*-main'
        title: 'AzureRecoveryUtil'
        releaseNotesSource: 'inline'
        releaseNotesInline: 'AzureRecoveryUtil Initial Build'
        assets: '$(Build.StagingDirectory)\out\AzureRecoveryTools.zip'
        isPreRelease: false
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'

